DE1

LED - ready na použití (červená), šifrování/dešifrování (modrá) a hotový proces (zelená LED)
Prostřední tlačítko je pro potvrzení daného znaku
vrchní/spodní tlačítko na různé šifry (celkem 3 - zelená, modrá, červená)

32 písmenek v abecedě
Vernam šifrování - a=0, b=1, c=2, ... písmenka -> čísla
Caesar šifrování - a=c, b=d, c=e, ... písmenka posunutá o určitý počet míst
Atbash šifrování - a=z, b=y, c=x, ... ozrcadlená abeceda

Topic 5: Implementation of Basic Ciphers

Description: This project aims to demonstrate various simple ciphers, such as the Vernam Cipher, Caesar 
Cipher, Atbash Cipher, and potentially others, using basic logic gates and flip-flops on the Nexys A7 
FPGA board. Each cipher enabling users to input plaintext messages and observe the resulting ciphertext 
generated by the encryption process. Buttons and switches can serve as input devices for users to input 
plaintext messages and control the encryption/decryption process. LEDs can provide visual feedback 
on the status of the encryption/decryption process, indicating ready to receive input, encryption/decryption 
in progress, and complete. The 7-segment display shows the ciphertext or plaintext output.


-- Top-level module
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Cipher_Project is
    Port ( clk : in STD_LOGIC;
           btn : in STD_LOGIC_VECTOR(3 downto 0);
           sw : in STD_LOGIC_VECTOR(7 downto 0);
           led : out STD_LOGIC_VECTOR(7 downto 0);
           seg : out STD_LOGIC_VECTOR(7 downto 0));
end Cipher_Project;

architecture Behavioral of Cipher_Project is

    -- Declare signals for internal use
    signal input_data : std_logic_vector(7 downto 0);
    signal output_data : std_logic_vector(7 downto 0);
    -- Declare signals for encryption/decryption process control
    signal encrypt_enable : std_logic;
    signal decrypt_enable : std_logic;
    
    -- Instantiate cipher modules
    component Vernam_Cipher is
        Port ( clk : in STD_LOGIC;
               input_data : in STD_LOGIC_VECTOR(7 downto 0);
               output_data : out STD_LOGIC_VECTOR(7 downto 0);
               enable : in STD_LOGIC);
    end component;
    
    -- Instantiate other cipher modules as needed

begin

    -- Connect switches to input_data
    input_data <= sw;

    -- Connect buttons to control encryption/decryption process
    encrypt_enable <= btn(0);
    decrypt_enable <= btn(1);

    -- Instantiate cipher modules
    Vernam : Vernam_Cipher
        port map (
            clk => clk,
            input_data => input_data,
            output_data => output_data,
            enable => encrypt_enable
        );
    
    -- Other cipher instantiations go here
    
    -- Connect LEDs to indicate process status
    led <= "00000000";  -- Placeholder, replace with appropriate values
    
    -- Connect 7-segment display to show output_data
    seg <= output_data;
    
end Behavioral;

-- Example of Vernam Cipher module
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Vernam_Cipher is
    Port ( clk : in STD_LOGIC;
           input_data : in STD_LOGIC_VECTOR(7 downto 0);
           output_data : out STD_LOGIC_VECTOR(7 downto 0);
           enable : in STD_LOGIC);
end Vernam_Cipher;

architecture Behavioral of Vernam_Cipher is

    -- Declare internal signals/variables as needed

begin

    process(clk)
    begin
        if rising_edge(clk) then
            -- Implement Vernam Cipher logic here
            if enable = '1' then
                -- Encryption/decryption process
                -- Replace with actual Vernam Cipher logic
                output_data <= input_data xor "11111111"; -- Placeholder, replace with actual key
            else
                -- No operation if not enabled
                output_data <= input_data;
            end if;
        end if;
    end process;

end Behavioral;
